//prueba con git

semaphore Administrador=1;
semaphore Estudiante=1;
semaphore adSale=0;
semaphore estSale=0;
int i=0;
int total=5;
int entra=1;
void estudiante(int id){
	wait(Estudiante);
	if(i<5){  //se termina ejecutando el mismo proceso 11 veces

	     cout<<"ESTUDIANTE "<<id<<"  entra en la habitacion"<<'\n';
	    i++;
	  signal(Estudiante); //no deberia entrar 
	  //creo que es buena idea poner un estSal aqui
		cout<<"Sssaaale estudiante "<<id<<" sale de la habitacion"<<'\n';
		i--;
	  	total--;
	 }else{
		entra=1;
		if(total==0){
			entra=0;
			i=0; //esto 
			signal(Administrador); //para que salga
		}else{
		signal(Administrador); //esta variable es depende //vuelve a llamar pero no deberia creo
			wait(estSale);	
	   cout<<"SSssale estudiante "<<id<<"  sale de la habitacion"<<'\n';	
			//total tambien podria ponerse aqui?
		}
	} 
	
}

void administrador(int id){
	wait(Administrador);
	
	//while(1){
	cout<<"		IAdministrador "<<id<<" intentaaaa ENTRAR"<<'\n';
	wait(Estudiante); //se detiene el que estudiantes entren
	if(entra=1 || i==0){ 
	cout<<"         EAdministrador "<<id<<" entra en la habitacion"<<'\n'; //solo pasa
	
	if(total>0){ //en este caso i cumple en caso //siempre sera 11
	
	 if(i!=0){
	  signal(estSale); //si no esta encendida -1
	  cout<<"         RAdministrador "<<id<<" revisa la habitacion "<<'\n';
	  signal(Estudiante); //por si hay estudiante que no terminaron
	 }else{
	  cout<<"         RAdministrador "<<id<<" revisa la habitacion "<<'\n';
	  signal(Estudiante);
	 }
	 //cout<<"         RAdministrador "<<id<<" revisa la habitacion "<<'\n';
	 total--;
	}else{
	 cout<<"         SAdministrador "<<id<<" sale de la habitacion "<<'\n';
	 signal(Estudiante); //permite entrar estudiantes ya que salio
	}
	
	}else{
	cout<<" 	Administrador "<<id<<" no logra entrar "<<'\n';
	signal(Estudiante);
	}//entra
	//}//while
	
}



void main(){
	cobegin{
	estudiante(1);estudiante(2);estudiante(3);estudiante(4);estudiante(5);estudiante(6);
	estudiante(7);estudiante(8);
	estudiante(9);estudiante(10);estudiante(11);
	administrador(99);
	}
}