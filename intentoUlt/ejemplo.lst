BACI System: C-- to PCODE Compiler, 12:29  18 Jul 2004
Source file: C:\jbaci\examples\trabajoGrup\intentoUlt\ejemplo.cm  Sun Oct 24 15:01:53 2021
 line  pc
   1    0  semaphore acceso=1; //puerta
   2    0  semaphore adminIN=1; //administrador
   3    0  semaphore estSale=1;
   4    0  int adminAdentro=0;
   5    0  int habVacia=0;
   6    0  int cantEst=0;
   7    0  int cantMax=2;//varia
   8    0  int numRandom;
   9    0  int terminaFiesta=0;// no es seguro
  10    0  
  11    0  void estudiante(int id){
  12    0  //int x=0;
  13    0                 
  14    0  		wait(acceso);
  15    2  		
  16    2  		cout<<"Intenta ingresar Estudiante"<<id<<endl;
  17    6  		if(adminAdentro==1){
  18   10  			cout<<"Acceso denegado Estudiante  "<<id<<endl;
  19   14    			//wait(estSale);  //se hace un proceso critico
  20   14  			signal(acceso); //dentro del proceso critico liberamos otro (se contradice)
  21   16  			wait(estSale);
  22   18  			}else{  
  23   19  				cout<<"Entra Estudiante "<<id <<" a la habitacion"<<'\n';
  24   25  				habVacia=1;
  25   28  				cantEst++;
  26   33  				cout<<"Hay " <<cantEst<< " estudiantes"<<'\n';
  27   39  				
  28   39  				signal(acceso);
  29   41  				
  30   41                               } //else estEntra
  31   41  //fuera de else
  32   41                               wait(estSale);
  33   43                                 if(habVacia==1){
  34   47  				cout<<"	IIISalir Estudiante"<<'\n';
  35   50  				numRandom = random(3);
  36   54  				if(numRandom==0){   //no hace la comparacion con terminaFies
  37   58  					cout<<"Sale Estudiante "<<id <<" de la habitacion"<<'\n';
  38   64  					cantEst--;
  39   69  					cout<<"Hay " <<cantEst<< " estudiantes"<<'\n';
  40   75  					if(cantEst==0){
  41   79  						habVacia=0; //administrador pueda entrar
  42   82  						signal(adminIN);
  43   84  						}else{
  44   85  						  signal(estSale); //todavia puede salir otro estudiante
  45   87  						}
  46   87  					
  47   87  					
  48   87                                   }else{  cout<<"  NO Sale    "<<'\n';
  49   91  					while(1){
  50   93  					  if(terminaFiesta==1){
  51   97  						cout<<"Sale Estudiante "<<id <<" de la habitacion"<<'\n';
  52  103  						cantEst--;
  53  108  						cout<<"Hay " <<cantEst<< " estudiantes"<<'\n';
  54  114  						if(cantEst==0){
  55  118  						  habVacia=0; //administrador pueda entrar
  56  121  						  signal(adminIN);
  57  123  						}else{
  58  124  						  signal(estSale); //todavia puede salir otro estudiante
  59  126  						}//cantEs
  60  126  					   }else{break;  signal(estSale);//pausar el sale}
  61  130  					}//while
  62  130  					}//si no sale? else
  63  131                                } //IF habVacia
  64  131                }//
  65  131     // signal(estSale);
  66  131  }
  67  132  void administrador(int id){
  68  132   while(1){
  69  134                     wait(acceso);  //
  70  136  		    cout<<"	Administrador "<<id<<" intenta ingresar"<<endl;
  71  141  			if(habVacia==0){
  72  145  				cout<<"      Entra Administrador"<<id<<endl;	
  73  149  				cout<<"      Revisa Administrador"<<id<<endl;				
  74  153  				adminAdentro=1;
  75  156  				habVacia=1;
  76  159  				cout<<"      SALE Administrador"<<id<<endl;	
  77  163  				habVacia=0;
  78  166                                  adminAdentro=0;
  79  169                           }else if(cantEst >= cantMax){
  80  174  				cout<<"      Entra Administrador"<<id<<" logra ingresar"<<endl;
  81  179  				cout<<"      Termina la fiesta Administrador"<<id<<endl;	
  82  183  				cout<<"      Revisa Administrador"<<id<<endl;	
  83  187  				terminaFiesta=1;
  84  190  				adminAdentro=1;
  85  193  				wait(adminIN);
  86  195  				if(habVacia==0){
  87  199  					cout<<"      SALE Administrador"<<id<<endl;
  88  203  					adminAdentro=0;
  89  206  					signal(adminIN);
  90  208  				}else{
  91  209  					signal(estSale);
  92  211  				}
  93  211  				
  94  211  
  95  211                                }else{ 
  96  212  				cout<<"      Administrador "<<id<<" acceso denegado"<<endl;
  97  217                                }
  98  217  		  signal(acceso);
  99  219   }   
 100  220  }
 101  221  void main(){
 102  222     cobegin{
 103  223                  estudiante(1);estudiante(2);estudiante(3);estudiante(4);
 104  239  		administrador(99);
 105  243       }
 106  244  }
